<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ MIT License
  ~
  ~ Copyright (c) 2019-2022 Yurii Dubinka
  ~
  ~ Permission is hereby granted, free of charge, to any person obtaining a copy
  ~ of this software and associated documentation files (the "Software"),
  ~ to deal in the Software without restriction, including without limitation
  ~ the rights to use, copy, modify, merge, publish, distribute, sublicense,
  ~ and/or sell copies of the Software, and to permit persons to whom
  ~ the Software is  furnished to do so, subject to the following conditions:
  ~
  ~ The above copyright notice and this permission notice shall be included
  ~ in all copies or substantial portions of the Software.
  ~
  ~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  ~ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  ~ FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
  ~ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  ~ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ~ ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
  ~ OR OTHER DEALINGS IN THE SOFTWARE.
  -->

<test-data
    xmlns="http://pmd.sourceforge.net/rule-tests"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests https://pmd.sourceforge.io/rule-tests_1_0_0.xsd">

  <test-code>
    <description>[GOOD]: all mandatory constructors are provided</description>
    <expected-problems>0</expected-problems>
    <code><![CDATA[
class MyException extends Exception {
    public MyException(String pattern, Object... args) {
         super(String.format(pattern, args));
   }

   public MyException(Throwable cause, String pattern, Object... args) {
         super(String.format(pattern, args), cause);
   }
}
    ]]></code>
  </test-code>

  <test-code>
    <description>
      [GOOD]: mandatory constructor `MyException(String, Object...)` is provided
    </description>
    <expected-problems>0</expected-problems>
    <code><![CDATA[
class MyException extends Exception {
    public MyException(String pattern, Object... args) {
         super(String.format(pattern, args));
   }
}
    ]]></code>
  </test-code>

  <test-code>
    <description>
      [GOOD]: mandatory constructor `MyException(Throwable, String, Object...)` is provided
    </description>
    <expected-problems>0</expected-problems>
    <code><![CDATA[
class MyException extends Exception {
    public MyException(Throwable cause, String pattern, Object... args) {
         super(String.format(pattern, args));
   }
}
    ]]></code>
  </test-code>

  <test-code>
    <description>
      [GOOD]: exception with mandatory constructor extends ArithmeticException
    </description>
    <expected-problems>0</expected-problems>
    <code><![CDATA[
class MyException extends ArithmeticException {
    public MyException(Throwable cause, String pattern, Object... args) {}
}
    ]]></code>
  </test-code>

  <test-code>
    <description>[GOOD]: inner exception class with mandatory constructor</description>
    <expected-problems>0</expected-problems>
    <code><![CDATA[
class Foo {
    private class InnerException extends Exception {
        public InnerException(String pattern, Object... args) {}
    }
}
    ]]></code>
  </test-code>

    <test-code>
    <description>[GOOD]: skip non-exception class</description>
    <expected-problems>0</expected-problems>
    <code><![CDATA[
class Foo extends Number {
}
    ]]></code>
  </test-code>

  <test-code>
    <description>[BAD]: no constructors</description>
    <expected-problems>1</expected-problems>
    <expected-linenumbers>1</expected-linenumbers>
    <code><![CDATA[
class MyException extends Exception {                       //violation
}
    ]]></code>
  </test-code>

  <test-code>
    <description>[BAD]: no mandatory constructor: public MyException()</description>
    <expected-problems>1</expected-problems>
    <expected-linenumbers>1</expected-linenumbers>
    <code><![CDATA[
class MyException extends Exception {                       //violation
    public MyException() {
    }
}
    ]]></code>
  </test-code>

  <test-code>
    <description>[BAD]: no mandatory constructor: public MyException(Throwable, Object...)</description>
    <expected-problems>1</expected-problems>
    <expected-linenumbers>1</expected-linenumbers>
    <code><![CDATA[
class MyException extends Exception {                       //violation
    public MyException(Throwable cause, Object... args) {
    }
}
    ]]></code>
  </test-code>

  <test-code>
    <description>[BAD]: no mandatory constructor</description>
    <expected-problems>1</expected-problems>
    <expected-linenumbers>1</expected-linenumbers>
    <code><![CDATA[
class MyException extends Exception {                       //violation
    public MyException(String pattern, Integer... args) {
    }
}
    ]]></code>
  </test-code>

  <test-code>
    <description>[BAD]: no mandatory constructor</description>
    <expected-problems>1</expected-problems>
    <expected-linenumbers>1</expected-linenumbers>
    <code><![CDATA[
class MyException extends Exception {                       //violation
    public MyException(Exception cause, String pattern, Object... args) {
    }
}
    ]]></code>
  </test-code>

  <test-code>
    <description>[BAD]: inner exception class without mandatory constructor</description>
    <expected-problems>1</expected-problems>
    <expected-linenumbers>2</expected-linenumbers>
    <code><![CDATA[
class Foo {
    private class InnerException extends Exception {              //violation
        public InnerException(Object pattern, Object... args) {}
    }
}
    ]]></code>
  </test-code>
</test-data>
