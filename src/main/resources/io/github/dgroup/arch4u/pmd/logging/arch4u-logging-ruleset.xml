<?xml version="1.0"?>
<!--
  ~ MIT License
  ~
  ~ Copyright (c) 2019-2022 Yurii Dubinka
  ~
  ~ Permission is hereby granted, free of charge, to any person obtaining a copy
  ~ of this software and associated documentation files (the "Software"),
  ~ to deal in the Software without restriction, including without limitation
  ~ the rights to use, copy, modify, merge, publish, distribute, sublicense,
  ~ and/or sell copies of the Software, and to permit persons to whom
  ~ the Software is  furnished to do so, subject to the following conditions:
  ~
  ~ The above copyright notice and this permission notice shall be included
  ~ in all copies or substantial portions of the Software.
  ~
  ~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  ~ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  ~ FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
  ~ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  ~ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ~ ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
  ~ OR OTHER DEALINGS IN THE SOFTWARE.
  -->

<ruleset name="arch4u-logging"
         xmlns="http://pmd.sf.net/ruleset/1.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"
         xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">
  <description>arch4u rules related to logging</description>
  <rule name="PotentiallyThreadLocalPollutionByMdc"
        since="0.1.0"
        language="java"
        externalInfoUrl="https://github.com/dgroup/arch4u-pmd/discussions/88"
        message="Potentially thread local pollution by MDC: https://github.com/dgroup/arch4u-pmd/discussions/88"
        class="io.github.dgroup.arch4u.pmd.PotentiallyThreadLocalPollutionByMdc">
    <description>
      The MDC usage requires a deep understanding of how it works and gives additional side effects that might not be transparent for regular java developers.
      See discussion about implementation tips/tricks on GitHub: https://github.com/dgroup/arch4u-pmd/discussions/88
    </description>
    <priority>3</priority>
    <properties>
      <property name="mdcClasses" value="org.slf4j.MDC"/>
    </properties>
    <example>
      <![CDATA[
      import org.slf4j.MDC;

      public class Foo {
          public void bar() {
              MDC.put(XXX, value);
              MDC.put("customer", order.getCustomerId());

              // ... business logic

              MDC.remove(XXX);
              MDC.remove("customer");
          }
      }
      ]]>
    </example>
  </rule>

  <rule name="AvoidMdcOutsideTryStatement"
        since="0.1.0"
        language="java"
        externalInfoUrl="https://github.com/dgroup/arch4u-pmd/discussions/86"
        message="MDC API should always be used within the try/finally statement: https://github.com/dgroup/arch4u-pmd/discussions/86"
        class="net.sourceforge.pmd.lang.rule.XPathRule">
  <description>
    MDC API should always be used within the try/finally statement.
    See discussion about implementation tips/tricks on GitHub: https://github.com/dgroup/arch4u-pmd/discussions/86
    </description>
    <priority>3</priority>
    <properties>
      <property name="mdcClasses" type="List[String]" delimiter="|"
                description="Full name of the MDC classes"
                value="org.slf4j.MDC"/>
      <property name="version" value="2.0"/>
      <property name="xpath">
        <value>
          <![CDATA[
          //PrimaryPrefix
          [some $class in $mdcClasses satisfies pmd-java:typeIsExactly($class)]
          [
          ./*[ends-with(@Image,'.put') and not(ancestor::TryStatement)]
          or
          ./*[(ends-with(@Image,'.remove') or ends-with(@Image,'.clear')) and not(ancestor::FinallyStatement)]
          ]
          ]]>
        </value>
      </property>
    </properties>
    <example>
      <![CDATA[
      import org.slf4j.MDC;

      public class Foo {
          public void bar() {
              try {
                  MDC.put(request, "someValue");
                  // ... business logic
              } finally {
                  MDC.remove(request);
                  // or MDC.clear();
              }
          }
      }
      ]]>
    </example>
  </rule>
</ruleset>
