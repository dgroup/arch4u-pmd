<?xml version="1.0"?>

<ruleset name="arch4u"
         xmlns="http://pmd.sf.net/ruleset/1.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"
         xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">

  <description>arch4u rules</description>

  <!-- Third-party rules -->
  <rule ref="io/github/dgroup/arch4u/pmd/arch4u-recommended-third-party-ruleset.xml"/>

  <rule name="AvoidUsingObjectMapperAsALocalVariable"
        since="0.1.0"
        language="java"
        message="ObjectMapper is better to have as a field rather than a local variable: https://github.com/dgroup/arch4u-pmd/discussions/30"
        class="net.sourceforge.pmd.lang.rule.XPathRule">
    <description>
      ObjectMapper is better to have as a field rather than a local variable due to performance reasons.
      It is allowed to be declared in fields, constructors, and initialization blocks.
      Read more: https://github.com/dgroup/arch4u-pmd/discussions/30
    </description>
    <priority>3</priority>
    <properties>
      <property name="version" value="2.0"/>
      <property name="xpath">
        <value>
          <![CDATA[
          //
          (
          Type/ReferenceType (: variable declaration :)
          |
          AllocationExpression (: constr invocation :)
          )
          /ClassOrInterfaceType
          [pmd-java:typeIs('com.fasterxml.jackson.databind.ObjectMapper')]
          [not(
          ancestor::FieldDeclaration (: skip fields :)
          or ancestor::Initializer   (: skip init blocks :)
          or ancestor::ConstructorDeclaration (: skip constructor blocks :)
          )]
          /.. (: violation points to the parent node :)
          ]]>
        </value>
      </property>
    </properties>
    <example>
      <![CDATA[
      import com.fasterxml.jackson.databind.ObjectMapper;
      class Foo {
          ObjectMapper objectMapper = new ObjectMapper(); //ok

          {
              objectMapper = new ObjectMapper();  //ok
          }

          Foo (ObjectMapper om) {                 //ok
              objectMapper = new ObjectMapper();  //ok
          }

          void bar(ObjectMapper om) {                                  //violation
              ObjectMapper mapper = om;                                //violation
              mapper = new ObjectMapper();                             //violation
              String str = new ObjectMapper().writeValueAsString(obj); //violation
          }
      }
      ]]>
    </example>
  </rule>

  <rule name="NoMandatoryConstructorInExceptionClass"
        since="0.2.0"
        language="java"
        message="Exception class must have at least one constructor with signature `public Ctor(Throwable, String, Object...)` or `public Ctor(String, Object...)`: https://github.com/dgroup/arch4u-pmd/discussions/31"
        class="net.sourceforge.pmd.lang.rule.XPathRule">
    <description>
      Exception class must have at least one constructor with signature
      `public Ctor(Throwable, String, Object...)` or `public Ctor(String, Object...)`.
      Read more: https://github.com/dgroup/arch4u-pmd/discussions/31
    </description>
    <priority>3</priority>
    <properties>
      <property name="version" value="2.0"/>
      <property name="xpath">
        <value>
          <![CDATA[
          //ClassOrInterfaceDeclaration
          [pmd-java:typeIs('java.lang.Exception')] (: extends Exception class :)
          [not(
          ./ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/ConstructorDeclaration[@Public=true()]
          /FormalParameters[
              (: Ctor(Throwable, String, Object...) :)
              (./FormalParameter[1]/Type/ReferenceType/ClassOrInterfaceType[pmd-java:typeIsExactly('java.lang.Throwable')]
              and
              ./FormalParameter[2]/Type/ReferenceType/ClassOrInterfaceType[pmd-java:typeIs('java.lang.String')]
              and
              ./FormalParameter[3][@Varargs=true()]/Type/ReferenceType/ClassOrInterfaceType[pmd-java:typeIsExactly('java.lang.Object')])
              or
              (: Ctor(String, Object...) :)
              (./FormalParameter[1]/Type/ReferenceType/ClassOrInterfaceType[pmd-java:typeIs('java.lang.String')]
              and
              ./FormalParameter[2][@Varargs=true()]/Type/ReferenceType/ClassOrInterfaceType[pmd-java:typeIsExactly('java.lang.Object')])]
          )]
          ]]>
        </value>
      </property>
    </properties>
    <example>
      <![CDATA[
          class MyException extends Exception {
              public MyException(String pattern, Object... args) {}

              public MyException(Throwable cause, String pattern, Object... args) {}
          }
          ]]>
    </example>
  </rule>
</ruleset>
